//////////////////////////////////////////////////////
// Copyright (C) Microsoft. 2018. All rights reserved.
//////////////////////////////////////////////////////


// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!
#pragma once

#include "CoreMinimal.h"
#include "Core/PlayFabBaseModel.h"

namespace PlayFab
{
namespace EventsModels
{

    struct PLAYFABCPP_API FEntityKey : public FPlayFabBaseModel
    {
        // Entity profile ID.
        FString Id;

        // Entity type. See https://api.playfab.com/docs/tutorials/entities/entitytypes
        FString Type;

        FEntityKey() :
            FPlayFabBaseModel(),
            Id(),
            Type()
            {}

        FEntityKey(const FEntityKey& src) :
            FPlayFabBaseModel(),
            Id(src.Id),
            Type(src.Type)
            {}

        FEntityKey(const TSharedPtr<FJsonObject>& obj) : FEntityKey()
        {
            readFromValue(obj);
        }

        ~FEntityKey();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    enum EntityTypes
    {
        EntityTypestitle,
        EntityTypesmaster_player_account,
        EntityTypestitle_player_account,
        EntityTypescharacter,
        EntityTypesgroup,
        EntityTypesservice
    };

    PLAYFABCPP_API void writeEntityTypesEnumJSON(EntityTypes enumVal, JsonWriter& writer);
    PLAYFABCPP_API EntityTypes readEntityTypesFromValue(const TSharedPtr<FJsonValue>& value);
    PLAYFABCPP_API EntityTypes readEntityTypesFromValue(const FString& value);

    struct PLAYFABCPP_API FEventContents : public FPlayFabBaseModel
    {
        // Entity associated with the event
        FEntityKey Entity;

        // The namespace in which the event is defined. It must be prepended with 'com.playfab.events.'
        FString EventNamespace;

        // The name of this event.
        FString Name;

        /**
         * [optional] The original unique identifier associated with this event before it was posted to PlayFab. The value might differ from
         * the EventId value, which is assigned when the event is received by the server.
         */
        FString OriginalId;

        /**
         * [optional] The time (in UTC) associated with this event when it occurred. If specified, this value is stored in the
         * OriginalTimestamp property of the PlayStream event.
         */
        Boxed<FDateTime> OriginalTimestamp;

        // [optional] Arbitrary data associated with the event. Only one of Payload or PayloadJSON is allowed.
        FJsonKeeper Payload;

        /**
         * [optional] Arbitrary data associated with the event, represented as a JSON serialized string. Only one of Payload or PayloadJSON is
         * allowed.
         */
        FString PayloadJSON;

        FEventContents() :
            FPlayFabBaseModel(),
            Entity(),
            EventNamespace(),
            Name(),
            OriginalId(),
            OriginalTimestamp(),
            Payload(),
            PayloadJSON()
            {}

        FEventContents(const FEventContents& src) :
            FPlayFabBaseModel(),
            Entity(src.Entity),
            EventNamespace(src.EventNamespace),
            Name(src.Name),
            OriginalId(src.OriginalId),
            OriginalTimestamp(src.OriginalTimestamp),
            Payload(src.Payload),
            PayloadJSON(src.PayloadJSON)
            {}

        FEventContents(const TSharedPtr<FJsonObject>& obj) : FEventContents()
        {
            readFromValue(obj);
        }

        ~FEventContents();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FWriteEventsRequest : public FPlayFabBaseModel
    {
        // Collection of events to write to PlayStream.
        TArray<FEventContents> Events;
        FWriteEventsRequest() :
            FPlayFabBaseModel(),
            Events()
            {}

        FWriteEventsRequest(const FWriteEventsRequest& src) :
            FPlayFabBaseModel(),
            Events(src.Events)
            {}

        FWriteEventsRequest(const TSharedPtr<FJsonObject>& obj) : FWriteEventsRequest()
        {
            readFromValue(obj);
        }

        ~FWriteEventsRequest();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

    struct PLAYFABCPP_API FWriteEventsResponse : public FPlayFabBaseModel
    {
        /**
         * [optional] The unique identifiers assigned by the server to the events, in the same order as the events in the request. Only
         * returned if FlushToPlayStream option is true.
         */
        TArray<FString> AssignedEventIds;
        FWriteEventsResponse() :
            FPlayFabBaseModel(),
            AssignedEventIds()
            {}

        FWriteEventsResponse(const FWriteEventsResponse& src) :
            FPlayFabBaseModel(),
            AssignedEventIds(src.AssignedEventIds)
            {}

        FWriteEventsResponse(const TSharedPtr<FJsonObject>& obj) : FWriteEventsResponse()
        {
            readFromValue(obj);
        }

        ~FWriteEventsResponse();

        void writeJSON(JsonWriter& writer) const override;
        bool readFromValue(const TSharedPtr<FJsonObject>& obj) override;
    };

}
}
